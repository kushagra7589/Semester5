struct addrinfo {
	int ai_flags; // AI_PASSIVE, AI_CANONNAME, etc.
	int ai_family; // AF_INET, AF_INET6, AF_UNSPEC
	int ai_socktype; // SOCK_STREAM, SOCK_DGRAM
	int ai_protocol; // use 0 for "any"
	size_t ai_addrlen; // size of ai_addr in bytes
	struct sockaddr *ai_addr; // struct sockaddr_in or _in6
	char *ai_canonname; // full canonical hostname
	struct addrinfo *ai_next; // linked list, next node
};

struct sockaddr {
	unsigned short	sa_family;			// address family, AF_INET4/6, unspecified etc
	char 			sa_data[14];		// 14 bytes of protocol address [destination address and port number]
}

---- for ipv4 -----

struct sockaddr_in {
	short int 			sin_family;		// address family
	unsigned short int 	sin_port;		// port number - in network byte order [use htons()]
	struct in_addr		sin_addr;		// ip address 
	unsigned char		sin_zero[8];	// make it zero using memset;
}

struct in_addr {
	uint32_t s_addr;		// 32 bit ip address *4 bytes (use htons())
} 

NOTE : we can typecast sockaddr to sockaddr_in and vice versa

